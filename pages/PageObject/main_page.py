from pages.PageObject.base_page import BasePage
from pages.locators import MainPageLocators
from pages.login_page import LoginPage #импорт страницы с логином


class MainPage(BasePage): #наследуется от базового класса - КЛАСС ДЛЯ КЛИКАНИЙ И МЕЛКИХ ФРОНТЕНД ДЕЙСТВИЙ
    def should_be_login_link(self): #проверка наличия ссылки на лог-ин(вызов метода из баз класса, чтобы обработать исключение и сделать осмысленный вывод)
        assert self.is_element_present(*MainPageLocators.LOGIN_LINK), "Login link is not presented" #берем из класса локаторов его атрибут(кортеж, распаковывается)
    def go_to_login_page(self): #переход на логин-стр
        self.is_element_present(*MainPageLocators.LOGIN_LINK).click() #берем из класса локаторов его атрибут(кортеж, распаковывается)
        #return LoginPage(self.browser, self.browser.current_url) # 1 способ: проинициализировать новый объект Page и вернуть его. Обратите внимание! При создании объекта мы обязательно передаем ему тот же самый объект драйвера для работы с браузером, а в качестве url передаем текущий адрес.

    #Это хорошая практика: писать сначала красные тесты и только потом делать их зелеными.

# ПЕРЕХОД МЕЖДУ СТРАНИЦАМИ ЛОГИНА И ГЛАВНОЙ:
# Первый способ: возвращать нужный Page Object. Затем в методе, который осуществляет переход к странице логина, проинициализировать новый объект Page и вернуть его:
#Теперь в тесте нам не нужно думать про инициализацию страницы: она уже создана. Сохранив возвращаемое значение в переменную, мы можем использовать методы новой страницы в тесте:
#Плюсы такого подхода:
# тест выглядит аккуратнее — не нужно инициализировать страницу в теле теста;
# явно возвращаем страницу — тип страницы ассоциирован с методом;
# не нужно каждый раз думать в разных тестах про инициализацию страницы — уменьшаем дублирование кода;
# минусы:
# если у нас копится большое количество страниц и переходов — образуется много перекрестных импортов;
# большая связность кода — при изменении логики придется менять возвращаемое значение;
# сложнее понимать код, так как страница инициализируется неявно;
# образуются циклические зависимости, что часто приводит к ошибкам.

#Второй подход: переход происходит неявно, страницу инициализируем в теле теста:
# Плюсы:
# меньше связность кода;
# меньше импортов, нет перекрестных импортов;
# больше гибкость;
# в тесте понятнее что происходит, т.к. явно инициализируем страницу.
# Минусы:
# появляется лишний шаг в тест-кейсе;
# каждый раз при написании теста нужно думать про корректные переходы;
# дублируется код.